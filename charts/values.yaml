# Default values for monitoring-stack.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

grafana:
  dashboards:
    enabled: true
  sidecar:
    dashboards:
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard


kube-prometheus-stack:
  nameOverride: "prometheus"
  fullnameOverride: "prometheus"
  enabled: false
  prometheus:
    enabled: false
  prometheusOperator:
    enabled: false
    admissionWebhooks:
      enabled: false
  defaultRules:
    create: false
  global:
    rbac:
      create: false
  kubeApiServer:
    enabled: false
  kubelet:
    enabled: false
  kubeControllerManager:
    enabled: false
  coreDns:
    enabled: false
  kubeDns:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeProxy:
    enabled: false
  kubeStateMetrics:
    enabled: false
  kube-state-metrics:
    rbac:
      create: false
    podSecurityPolicy:
      enabled: false
  nodeExporter:
    enabled: false
  alertmanager:
    enabled: false
  grafana:
    enabled: true
    testFramework:
      enabled: false
    serviceMonitor:
      selfMonitor: false
    service:
      type: NodePort
      port: 80
      targetPort: 3000
      nodePort: 30006
    persistence:
      type: pvc
      enabled: true
      storageClassName: sc-iep-localpv
      accessModes:
        - ReadWriteOnce
      size: 20Gi
    adminUser: admin
    adminPassword: admin

    sidecar:
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      datasources:
        defaultDatasourceEnabled: false

    ## Configure additional grafana datasources (passed through tpl)
    ## ref: http://docs.grafana.org/administration/provisioning/#datasources
    additionalDataSources:
        - name: Prometheus
          access: proxy
          editable: true
          orgId: 1
          type: prometheus
          url: http://prometheus-server:9090
          version: 1

prometheus:
  nameOverride: "prometheus"

  alertmanager:
    enabled: true

    ingress:
      enabled: false

    persistentVolume:
      enabled: true
      accessModes:
        - ReadWriteOnce
      mountPath: /data
      size: 2Gi
      storageClass: sc-iep-localpv

    service:
      nodePort: 30005
      type: NodePort

  kubeStateMetrics:
    enabled: true

  nodeExporter:
    enabled: true

  server:
    enabled: true
    fullnameOverride: "prometheus-server"

    global:
      ## How frequently to scrape targets by default
      ##
      scrape_interval: 30s
      ## How long until a scrape request times out
      ##
      scrape_timeout: 10s
      ## How frequently to evaluate rules
      ##
      evaluation_interval: 45s

    ingress:
      enabled: false

    persistentVolume:
      enabled: true
      accessModes:
        - ReadWriteOnce
      mountPath: /data
      size: 8Gi
      storageClass: sc-iep-localpv

    service:
      servicePort: 9090
      port: 9090
      nodePort: 30004
      type: NodePort

  pushgateway:
    enabled: true

  ## alertmanager ConfigMap entries
  ##
  alertmanagerFiles:
    alertmanager.yml:
      receivers:
        - name: default-receiver
          webhook_configs:
            - url: "https://webhook.site/22970833-03fd-43d2-8ab2-daf6f87048af"

      route:
        group_wait: 10s
        group_interval: 30s
        receiver: default-receiver
        repeat_interval: 45s

  serverFiles:
    alerts:
      groups:
        - name: Instances
          rules:
            - alert: InstanceDown
              expr: up == 0
              for: 10s
              labels:
                severity: page
              annotations:
                description: '{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute.'
                summary: 'Instance {{ $labels.instance }} down'